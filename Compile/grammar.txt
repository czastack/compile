<Start>-><类型> main(){<复合语句>}
<声明语句>-><类型><声明内容>;
<类型>->int|char|long
<声明内容>-><声明变量名><声明闭包>
<声明变量名>->@ASSIGN id<声明初值>
<声明闭包>->,<声明内容>|$ 
<声明初值>->=<算数表达式> @EQ | $
<赋值语句>->@ASSIGN id=<算数表达式> @EQ;
<算数表达式>-><项><加减闭包> @ADD_SUB
<加减闭包>->+<算数表达式> @ADD | -<算数表达式> @SUB | $
<项>-><因子><乘除闭包> @DIV_MUL
<乘除闭包>->*<项> @MUL | /<项> @DIV | $
<因子>->(<算数表达式>) @TRAN_LF
<因子>->@ASSIGN id|@ASSIGN cnum|@ASSIGN inum
<后缀运算符>->@SINGLE_OP ++ | @SINGLE_OP-- | $
<后缀表达式>->@ASSIGN id<后缀运算符>|$
<逻辑运算>-><逻辑或运算><逻辑与闭包>
<逻辑与闭包>->&&<逻辑运算>|$
<逻辑或运算>-><逻辑表达式><逻辑或闭包>
<逻辑或闭包>->||<逻辑或运算>|$
<逻辑表达式>-><因子><关系运算符><因子>@COMPARE
<关系运算符>-> @COMPARE_OP< | @COMPARE_OP> | @COMPARE_OP== | @COMPARE_OP!=
<逻辑表达式>->(<逻辑运算>)
<逻辑表达式>->!<逻辑运算>
<控制语句>->if(<逻辑运算>) @IF_FJ {<复合语句>} @IF_BACKPATCH_FJ <否则语句>
<否则语句>->@IF_RJ else{<复合语句>} @IF_BACKPATCH_RJ | $
<控制语句>->while(<逻辑运算>) @WHILE_FJ {<复合语句>} @WHILE_RJ@WHILE_BACKPATCH_FJ
<控制语句>->for(<声明语句><逻辑表达式> @FOR_FJ ;<后缀表达式>){<复合语句> @SINGLE} @FOR_RJ@FOR_BACKPATCH_FJ
<控制语句>->printf(<参数值>);
<控制语句>->scanf(id);
<参数值>-><因子>
<复合语句>-><复合语句内容><复合语句>|$
<复合语句内容>-><声明语句>|<控制语句>|<赋值语句>